{
  "_from": "connect-redis",
  "_id": "connect-redis@3.4.1",
  "_inBundle": false,
  "_integrity": "sha512-oXNcpLg/PJ6G4gbhyGwrQK9mUQTKYa2aEnOH9kWIxbNUjIFPqUmzz75RdLp5JTPSjrBVcz+9ll4sSxfvlW0ZLA==",
  "_location": "/connect-redis",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "connect-redis",
    "fetchSpec": "latest",
    "name": "connect-redis",
    "raw": "connect-redis",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/connect-redis/-/connect-redis-3.4.1.tgz",
  "_shasum": "0623af46182232457fefbc7d4f552d87d35b3d20",
  "_shrinkwrap": null,
  "_spec": "connect-redis",
  "_where": "/home/xiujin/Documents/17-648/project1/project3",
  "author": {
    "email": "tj@vision-media.ca",
    "name": "TJ Holowaychuk"
  },
  "bugs": {
    "url": "https://github.com/visionmedia/connect-redis/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Marc Harter",
      "email": "wavded@gmail.com"
    }
  ],
  "dependencies": {
    "debug": "^4.1.1",
    "redis": "^2.8.0"
  },
  "deprecated": false,
  "description": "Redis session store for Connect",
  "devDependencies": {
    "blue-tape": "^1.0.0",
    "bluebird": "^3.5.2",
    "eslint": "^3.19.0",
    "express-session": "^1.15.6",
    "ioredis": "^4.0.0",
    "istanbul": "^0.4.5",
    "sinon": "^2.3.4",
    "tape": "^4.2.1"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/visionmedia/connect-redis#readme",
  "license": "MIT",
  "main": "./index.js",
  "name": "connect-redis",
  "optionalDependencies": {},
  "readme": "[![npm](https://img.shields.io/npm/v/connect-redis.svg)](https://npmjs.com/package/connect-redis) [![Dependencies](https://img.shields.io/david/tj/connect-redis.svg)](https://david-dm.org/tj/connect-redis) ![Downloads](https://img.shields.io/npm/dm/connect-redis.svg)\n\n**connect-redis** is a Redis session store backed by [node_redis](http://github.com/mranney/node_redis), and is insanely fast :). Requires redis >= `2.0.0` for the *SETEX* command.\n\nSetup\n-----\n\n```sh\nnpm install connect-redis express-session\n```\n\nPass the `express-session` store into `connect-redis` to create a `RedisStore` constructor.\n\n```js\nvar session = require('express-session');\nvar RedisStore = require('connect-redis')(session);\n\napp.use(session({\n    store: new RedisStore(options),\n    secret: 'keyboard cat',\n    resave: false\n}));\n```\n\nOptions\n-------\n\nA Redis client is required. An existing client can be passed directly using the `client` param or created for you using the `host`, `port`, or `socket` params.\n\n- `client` An existing client\n- `host` Redis server hostname\n- `port` Redis server portno\n- `socket` Redis server unix_socket\n- `url` Redis server url\n\nThe following additional params may be included:\n\n-\t`ttl` Redis session TTL (expiration) in seconds. Defaults to session.cookie.maxAge (if set), or one day.\n\t-\tThis may also be set to a function of the form `(store, sess, sessionID) => number`.\n-\t`disableTTL` Disables setting TTL, keys will stay in redis until evicted by other means (overides `ttl`\\)\n-\t`db` Database index to use. Defaults to Redis's default (0).\n-\t`pass` Password for Redis authentication\n-\t`prefix` Key prefix defaulting to \"sess:\"\n-\t`unref` Set `true` to unref the Redis client. **Warning**: this is [an experimental feature](https://github.com/mranney/node_redis#clientunref).\n-\t`serializer` An object containing `stringify` and `parse` methods compatible with Javascript's `JSON` to override the serializer used\n-\t`logErrors` Whether or not to log client errors. (default: `false`\\)\n\t-\tIf `true`, a default logging function (`console.error`) is provided.\n\t-\tIf a function, it is called anytime an error occurs (useful for custom logging)\n\t-\tIf `false`, no logging occurs.\n-\t`scanCount` Value used for *count* parameter in [Redis `SCAN` command](https://redis.io/commands/scan#the-count-option) (used in `ids()` and `all()` methods, defaults to 100).\n\nAny options not included in this list will be passed to the redis `createClient()` method directly.\n\nCustom Redis clients\n--------------------\n\nClients other than `node_redis` will work if they support the same interface. Just pass the client instance as the `client` configuration option. Known supported clients include:\n\n-\t[ioredis](https://github.com/luin/ioredis) - adds support for Redis Sentinel and Cluster\n\n#### Testing / Development\n\nYou can use [redis-mock](https://github.com/yeahoffline/redis-mock) as the client instead of connecting to an actual redis server for automated testing and development purposes.\n\nFAQ\n---\n\n#### How do I handle lost connections to Redis?\n\nBy default, the `node_redis` client will [auto-reconnect](https://github.com/mranney/node_redis#overloading) when a connection is lost. But requests may come in during that time. In express, one way this scenario can be handled is including a \"session check\" after setting up a session (checking for the existence of `req.session`\\):\n\n```js\napp.use(session( /* setup session here */ ))\napp.use(function (req, res, next) {\n  if (!req.session) {\n    return next(new Error('oh no')) // handle error\n  }\n  next() // otherwise continue\n})\n```\n\nIf you want to retry, here is [another option](https://github.com/expressjs/session/issues/99#issuecomment-63853989).\n\nLicense\n=======\n\nMIT\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/visionmedia/connect-redis.git"
  },
  "scripts": {
    "bench": "node bench/redisbench.js",
    "lint": "eslint index.js test lib bench",
    "test": "istanbul cover tape \"test/*-test.js\"",
    "test-debug": "DEBUG=* istanbul cover tape \"test/*-test.js\""
  },
  "version": "3.4.1"
}
